pipeline {      
    agent any
    parameters {
        choice(
            name: 'release_env',
            choices: '',
            description: ''
            )
        choice(
            name: 'branch',
            choices: '',
            description: ''
            )
        choice(
            name: 'REGISTRY_HOST',
            choices: '172.17.5.228:5000',
            description: 'registry host'
            )
         choice(
            name: 'app_name',
            choices: '',
            description: ''
            )
         choice(
            name: 'GIT_TAG',
            choices: 'test',
            description: ''
            )                     
    }

    environment {
//        git_auth_id = 'Bitbucket_PROD' //需要建立credentialsId
        DOCKER_TAG = 'latest'
      }
    
	
    stages {
       stage('Maven Build') {
         
            steps {
                sh """
                echo ${GIT_TAG}
		
                /opt/maven/bin/mvn clean install -Dmaven.test.skip=true
                """
            }

        }
        
	stage('Docker Build') {
            steps {
               //withCredentials([usernamePassword(credentialsId: '*******', passwordVariable: '*****', usernameVariable: '*****')])
                //sh '''
                  //  echo $Password | docker login --username $UserName --password-stdin ${REGISTRY_HOST} 
                //'''
		script {
			sh '''
	                sudo docker build -t ${REGISTRY_HOST}/${target_branch}/\${modulename}:${GIT_TAG} .
	                sudo docker tag ${REGISTRY_HOST}/${target_branch}/\${modulename}:${GIT_TAG} ${REGISTRY_HOST}/${target_branch}/\${modulename}:${DOCKER_TAG}
	                sudo docker push ${REGISTRY_HOST}/${target_branch}/\${modulename}:${DOCKER_TAG}
	                sudo docker push ${REGISTRY_HOST}/${target_branch}/\${modulename}:${GIT_TAG}
	                '''
                  echo "======================================"
		               }	                    
              
			}
		}

	stage('Deploy') {

        steps {
	    withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: "test-k8s-config", namespace: "default", serverUrl: '') {
	    sh "sed -e 's#{APP_NAME}#student#g' k8s-deployment.tpl > k8s-deployment.yml"
            sh "kubectl apply -f k8s-deployment.yml --namespace=default"
          }
          }
         
        }
      }
}