pipeline {      
    agent any
    //agent {label 'Docker-slave-mybmwapp'}
    tools {
            maven 'maven3'
            jdk 'openjdk11'
    }    
    options {
        timeout(time:3900, unit: 'SECONDS') /**设置Pipeline运行的超时时间*/
        buildDiscarder(logRotator(numToKeepStr: '7')) /**保持构建的最大个数*/
        timestamps() /**预定义由Pipeline生成的所有控制台输出时间。例如：options { timestamps() }*/
    }
    
    parameters {
        choice(
            name: 'target_branch',
            choices: 'test',
            description: 'test'
            )
        choice(
            name: 'REGISTRY_HOST',
            choices: '172.17.5.228',
            description: 'registry host'
            )
         choice(
            name: 'profiles',
            choices: 'dev',
            description: 'Dockerfile ARG profiles'
            )
            
         choice(
            name: 'ArtifactPath',
            choices: 'target/*.jar',
            description: 'ArtifactPath not used '
            )
         choice(
            name: 'modulename',
            choices: 'test',
            description: ''
            )
         choice(
            name: 'GIT_TAG',
            choices: 'test',
            description: ''
            )                     
    }

    environment {
        git_auth_id = 'Bitbucket_PROD' //需要建立credentialsId
        DOCKER_TAG = 'latest'
      }
    
	
    stages {
       stage('Checkout git repo') {
           steps {
                    git(
                        url: params.target_repo_url,
                        branch: params.target_branch,
                        credentialsId: env.git_auth_id,
                        changelog: true
                    )
                }
       }
       stage('Maven Build') {
         
            steps {
                sh """
                echo ${GIT_TAG}
                mvn clean install -Dmaven.test.skip=true
                """
            }

        }
        
	   stage('Docker Build') {
            steps {
               //withCredentials([usernamePassword(credentialsId: '*******', passwordVariable: '*****', usernameVariable: '*****')])
                //sh '''
                  //  echo $Password | docker login --username $UserName --password-stdin ${REGISTRY_HOST} 
                //'''
		script {
			sh '''
	                docker build -t ${REGISTRY_HOST}/${target_branch}/\${modulename}:${GIT_TAG} .
	                docker tag ${REGISTRY_HOST}/${target_branch}/\${modulename}:${GIT_TAG} ${REGISTRY_HOST}/${target_branch}/\${modulename}:${DOCKER_TAG}
	                docker push ${REGISTRY_HOST}/${target_branch}/\${modulename}:${DOCKER_TAG}
	                docker push ${REGISTRY_HOST}/${target_branch}/\${modulename}:${GIT_TAG}
	                //docker rmi ${REGISTRY_HOST}/${target_branch}/\${modulename}:${GIT_TAG}
	                '''
                  echo "======================================"
		               }	                    
              
			}
		}
	}
}